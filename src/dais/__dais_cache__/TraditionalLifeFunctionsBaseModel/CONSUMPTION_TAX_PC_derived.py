
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def CONSUMPTION_TAX_PC_derived(CONSUMPTION_TAX_PC,T,REN_POL_TERM_Y):
	if T>REN_POL_TERM_Y*12:
		return 0
	else:
		#simplifying this logic - might hide a mistake
		return CONSUMPTION_TAX_PC


@njit(nogil=True, parallel=True, cache=True)
def wrapped_CONSUMPTION_TAX_PC_derived(CONSUMPTION_TAX_PC,T,REN_POL_TERM_Y):
	arr_CONSUMPTION_TAX_PC_derived=np.zeros(CONSUMPTION_TAX_PC.shape,dtype=float64)
	for y in prange(CONSUMPTION_TAX_PC.shape[0]):
		for t in range(CONSUMPTION_TAX_PC.shape[1]):
			arr_CONSUMPTION_TAX_PC_derived[y,t]=CONSUMPTION_TAX_PC_derived(CONSUMPTION_TAX_PC[y,t],T[y,t],REN_POL_TERM_Y[y,0])
	return arr_CONSUMPTION_TAX_PC_derived
