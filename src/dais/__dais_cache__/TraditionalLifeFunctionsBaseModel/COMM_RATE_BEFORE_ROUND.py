
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def COMM_RATE_BEFORE_ROUND(CP_TYPE_patch,POL_YR,COMM_ADJ_MULT,COMM_AG_FAC_1_derived,COMM_RATE_PC,COMM_RATE_ACCUM_PC):
	if CP_TYPE_patch==0:
		if POL_YR>1:
			return 0
		else:
			return COMM_RATE_ACCUM_PC
	else:
		return COMM_RATE_PC*COMM_AG_FAC_1_derived*COMM_ADJ_MULT


@njit(nogil=True, parallel=True, cache=True)
def wrapped_COMM_RATE_BEFORE_ROUND(CP_TYPE_patch,POL_YR,COMM_ADJ_MULT,COMM_AG_FAC_1_derived,COMM_RATE_PC,COMM_RATE_ACCUM_PC):
	arr_COMM_RATE_BEFORE_ROUND=np.zeros(POL_YR.shape,dtype=float64)
	for y in prange(POL_YR.shape[0]):
		for t in range(POL_YR.shape[1]):
			arr_COMM_RATE_BEFORE_ROUND[y,t]=COMM_RATE_BEFORE_ROUND(CP_TYPE_patch[y,0],POL_YR[y,t],COMM_ADJ_MULT[y,0],COMM_AG_FAC_1_derived[y,0],COMM_RATE_PC[y,t],COMM_RATE_ACCUM_PC[y,t])
	return arr_COMM_RATE_BEFORE_ROUND
