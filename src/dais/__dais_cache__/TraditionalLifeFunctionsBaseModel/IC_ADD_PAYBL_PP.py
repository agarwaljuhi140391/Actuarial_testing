
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def IC_ADD_PAYBL_PP(IC_BASE_PAYBL_PP,COMM_CAP,IC_INCT_PAYBL_PP,IC_ADD_BASE_PC_derived,IC_ADD_SPEC_PC_derived):
	return (min(IC_BASE_PAYBL_PP,COMM_CAP) - IC_INCT_PAYBL_PP) * (IC_ADD_BASE_PC_derived+IC_ADD_SPEC_PC_derived)


@njit(nogil=True, parallel=True, cache=True)
def wrapped_IC_ADD_PAYBL_PP(IC_BASE_PAYBL_PP,COMM_CAP,IC_INCT_PAYBL_PP,IC_ADD_BASE_PC_derived,IC_ADD_SPEC_PC_derived):
	arr_IC_ADD_PAYBL_PP=np.zeros(IC_BASE_PAYBL_PP.shape,dtype=float64)
	for y in prange(IC_BASE_PAYBL_PP.shape[0]):
		for t in range(IC_BASE_PAYBL_PP.shape[1]):
			arr_IC_ADD_PAYBL_PP[y,t]=IC_ADD_PAYBL_PP(IC_BASE_PAYBL_PP[y,t],COMM_CAP[y,t],IC_INCT_PAYBL_PP[y,t],IC_ADD_BASE_PC_derived[y,0],IC_ADD_SPEC_PC_derived[y,0])
	return arr_IC_ADD_PAYBL_PP
