
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def COMM_CAP(COMM_CAP_RATE,SUM_ASSURED,PREM_FREQ):
	if COMM_CAP_RATE==999999:
		return 999999
	else:
		return COMM_CAP_RATE*SUM_ASSURED/(10*max(1,PREM_FREQ))


@njit(nogil=True, parallel=True, cache=True)
def wrapped_COMM_CAP(COMM_CAP_RATE,SUM_ASSURED,PREM_FREQ):
	arr_COMM_CAP=np.zeros(COMM_CAP_RATE.shape,dtype=float64)
	for y in prange(COMM_CAP_RATE.shape[0]):
		for t in range(COMM_CAP_RATE.shape[1]):
			arr_COMM_CAP[y,t]=COMM_CAP(COMM_CAP_RATE[y,t],SUM_ASSURED[y,0],PREM_FREQ[y,0])
	return arr_COMM_CAP
