
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def REMAINING_PREMIUM_TERM(T, PREM_PAYBL_Y,POL_YR,REN_POL_TERM_Y):
	if T>REN_POL_TERM_Y*12:
		return 0
	else:
		return PREM_PAYBL_Y-POL_YR


@njit(nogil=True, parallel=True, cache=True)
def wrapped_REMAINING_PREMIUM_TERM(T,PREM_PAYBL_Y,POL_YR,REN_POL_TERM_Y):
	arr_REMAINING_PREMIUM_TERM=np.zeros(T.shape,dtype=int32)
	for y in prange(T.shape[0]):
		for t in range(T.shape[1]):
			arr_REMAINING_PREMIUM_TERM[y,t]=REMAINING_PREMIUM_TERM(T[y,t],PREM_PAYBL_Y[y,0],POL_YR[y,t],REN_POL_TERM_Y[y,0])
	return arr_REMAINING_PREMIUM_TERM
