
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def IC_INCT_PAYBL_PP(REN_T,IC_PERIOD_M,COMM_INCT_RATE_PC,COMM_MODAL_FAC,PREM_INC_PP):
	if REN_T>IC_PERIOD_M:
		return 0
	else:
		return COMM_INCT_RATE_PC*COMM_MODAL_FAC*PREM_INC_PP


@njit(nogil=True, parallel=True, cache=True)
def wrapped_IC_INCT_PAYBL_PP(REN_T,IC_PERIOD_M,COMM_INCT_RATE_PC,COMM_MODAL_FAC,PREM_INC_PP):
	arr_IC_INCT_PAYBL_PP=np.zeros(REN_T.shape,dtype=float64)
	for y in prange(REN_T.shape[0]):
		for t in range(REN_T.shape[1]):
			arr_IC_INCT_PAYBL_PP[y,t]=IC_INCT_PAYBL_PP(REN_T[y,t],IC_PERIOD_M[0,0],COMM_INCT_RATE_PC[y,t],COMM_MODAL_FAC[y,t],PREM_INC_PP[y,t])
	return arr_IC_INCT_PAYBL_PP
