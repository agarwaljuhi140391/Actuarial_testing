
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def RC_PAYBL_PP(RENEW_COMM_BEFORE_TAX,CONSUMPTION_TAX_PC_derived,COMM_BON_PC_derived):
	return RENEW_COMM_BEFORE_TAX*(1+CONSUMPTION_TAX_PC_derived/100)*(1+COMM_BON_PC_derived/100)


@njit(nogil=True, parallel=True, cache=True)
def wrapped_RC_PAYBL_PP(RENEW_COMM_BEFORE_TAX,CONSUMPTION_TAX_PC_derived,COMM_BON_PC_derived):
	arr_RC_PAYBL_PP=np.zeros(RENEW_COMM_BEFORE_TAX.shape,dtype=float64)
	for y in prange(RENEW_COMM_BEFORE_TAX.shape[0]):
		for t in range(RENEW_COMM_BEFORE_TAX.shape[1]):
			arr_RC_PAYBL_PP[y,t]=RC_PAYBL_PP(RENEW_COMM_BEFORE_TAX[y,t],CONSUMPTION_TAX_PC_derived[y,t],COMM_BON_PC_derived[y,t])
	return arr_RC_PAYBL_PP
