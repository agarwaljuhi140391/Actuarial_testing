
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def BASE_COMM_CAP_RATE(POL_YR,MAX_COMM_PAYBL_Y,COMM_S_RATE,REN_COMM_S_RATE):
	if POL_YR>MAX_COMM_PAYBL_Y:
		return 0
	else:
		if POL_YR==1:
			return COMM_S_RATE
		else:
			return REN_COMM_S_RATE


@njit(nogil=True, parallel=True, cache=True)
def wrapped_BASE_COMM_CAP_RATE(POL_YR,MAX_COMM_PAYBL_Y,COMM_S_RATE,REN_COMM_S_RATE):
	arr_BASE_COMM_CAP_RATE=np.zeros(POL_YR.shape,dtype=float64)
	for y in prange(POL_YR.shape[0]):
		for t in range(POL_YR.shape[1]):
			arr_BASE_COMM_CAP_RATE[y,t]=BASE_COMM_CAP_RATE(POL_YR[y,t],MAX_COMM_PAYBL_Y[y,0],COMM_S_RATE[y,0],REN_COMM_S_RATE[y,0])
	return arr_BASE_COMM_CAP_RATE
