
#THIS CODE IS AUTO-GENERATED by complex_template, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64
from dais.models.simple_dispatcher import irr_est

@njit(nogil=True, cache=True)
def PARTIAL_RENEW_COMM_EARNED(T,REN_POL_TERM_Y,REN_T,RC_PAYBL_PP,CONSUMPTION_TAX_PC_derived,PARTIAL_RENEW_COMM_EARNED):
	for t in range(T.shape[0]):
		if T[t]>(REN_POL_TERM_Y[0]*12):
			PARTIAL_RENEW_COMM_EARNED[t] = 0
		else:
			if (T[t] != 1) and (REN_T[t]==1):
				PARTIAL_RENEW_COMM_EARNED[t] = RC_PAYBL_PP[t]/(1+CONSUMPTION_TAX_PC_derived[t]/100)
			else:
				PARTIAL_RENEW_COMM_EARNED[t] = PARTIAL_RENEW_COMM_EARNED[t-1] + RC_PAYBL_PP[t]/(1+CONSUMPTION_TAX_PC_derived[t]/100)


@njit(nogil=True, parallel=True, cache=True)
def wrapped_PARTIAL_RENEW_COMM_EARNED(T,REN_POL_TERM_Y,REN_T,RC_PAYBL_PP,CONSUMPTION_TAX_PC_derived):
	arr_PARTIAL_RENEW_COMM_EARNED=np.zeros((T.shape[0],T.shape[1]),dtype=float64)
	for y in prange(arr_PARTIAL_RENEW_COMM_EARNED.shape[0]):
		PARTIAL_RENEW_COMM_EARNED(T[y,:],REN_POL_TERM_Y[y,:],REN_T[y,:],RC_PAYBL_PP[y,:],CONSUMPTION_TAX_PC_derived[y,:],arr_PARTIAL_RENEW_COMM_EARNED[y,:])
	return arr_PARTIAL_RENEW_COMM_EARNED
