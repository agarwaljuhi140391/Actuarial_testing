
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def PREM_INC(PREM_INC_PP,T,DURATIONIF_M,NO_HTHY_POLS_IFSM):
	if T<=DURATIONIF_M:
		return 0
	else:
		return PREM_INC_PP*NO_HTHY_POLS_IFSM


@njit(nogil=True, parallel=True, cache=True)
def wrapped_PREM_INC(PREM_INC_PP,T,DURATIONIF_M,NO_HTHY_POLS_IFSM):
	arr_PREM_INC=np.zeros(PREM_INC_PP.shape,dtype=float64)
	for y in prange(PREM_INC_PP.shape[0]):
		for t in range(PREM_INC_PP.shape[1]):
			arr_PREM_INC[y,t]=PREM_INC(PREM_INC_PP[y,t],T[y,t],DURATIONIF_M[y,0],NO_HTHY_POLS_IFSM[y,t])
	return arr_PREM_INC
