
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def MATURITY_RATE(T,REN_POL_TERM_Y,ANN_TERM_Y,POL_TERM_Y,RENEWABLE_IND,REN_RATE,ANN_RATE):
	if T==(REN_POL_TERM_Y+ANN_TERM_Y)*12+1:
		return 1
	else:
		if POL_TERM_Y==0:
			return 0
		if ((T>POL_TERM_Y*12) and (T%(POL_TERM_Y*12)==1) and (RENEWABLE_IND==1)) or (T==(REN_POL_TERM_Y*12+1)):
			return 1-REN_RATE-ANN_RATE
		else:
			return 0


@njit(nogil=True, parallel=True, cache=True)
def wrapped_MATURITY_RATE(T,REN_POL_TERM_Y,ANN_TERM_Y,POL_TERM_Y,RENEWABLE_IND,REN_RATE,ANN_RATE):
	arr_MATURITY_RATE=np.zeros(T.shape,dtype=float64)
	for y in prange(T.shape[0]):
		for t in range(T.shape[1]):
			arr_MATURITY_RATE[y,t]=MATURITY_RATE(T[y,t],REN_POL_TERM_Y[y,0],ANN_TERM_Y[y,0],POL_TERM_Y[y,0],RENEWABLE_IND[y,0],REN_RATE[y,0],ANN_RATE[y,0])
	return arr_MATURITY_RATE
