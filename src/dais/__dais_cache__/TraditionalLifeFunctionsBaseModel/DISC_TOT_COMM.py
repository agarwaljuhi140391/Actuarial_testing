
#THIS CODE IS AUTO-GENERATED by complex_template, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64
from dais.models.simple_dispatcher import irr_est

@njit(nogil=True, cache=True)
def DISC_TOT_COMM(T
		, DURATIONIF_M,REN_POL_TERM_Y,ANN_TERM_Y
		, M_DISC_RATE
		, TOT_COMM
		, DISC_TOT_COMM):
	for t in range(T.shape[0],-1,-1):#Note this counts down
		if t==T.shape[0]:
			DISC_TOT_COMM[t]=0
		else:
			if (T[t]<DURATIONIF_M[0]) or (T[t]>(REN_POL_TERM_Y[0]+ANN_TERM_Y[0])*12) or (M_DISC_RATE[0]==-1):
				DISC_TOT_COMM[t]=0
			else:
				DISC_TOT_COMM[t]=-1*TOT_COMM[t+1]+DISC_TOT_COMM[t+1]/(1+M_DISC_RATE[0])


@njit(nogil=True, parallel=True, cache=True)
def wrapped_DISC_TOT_COMM(T,DURATIONIF_M,REN_POL_TERM_Y,ANN_TERM_Y,M_DISC_RATE,TOT_COMM):
	arr_DISC_TOT_COMM=np.zeros((T.shape[0],T.shape[1]),dtype=float64)
	for y in prange(arr_DISC_TOT_COMM.shape[0]):
		DISC_TOT_COMM(T[y,:],DURATIONIF_M[y,:],REN_POL_TERM_Y[y,:],ANN_TERM_Y[y,:],M_DISC_RATE[y,:],TOT_COMM[y,:],arr_DISC_TOT_COMM[y,:])
	return arr_DISC_TOT_COMM
