
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def REN_T(RENEWABLE_IND,T,POL_TERM_Y):
	if RENEWABLE_IND==0:
		return T
	else:
		if POL_TERM_Y==0:
			return 0
		else:
			return (T-1)%(POL_TERM_Y*12)+1


@njit(nogil=True, parallel=True, cache=True)
def wrapped_REN_T(RENEWABLE_IND,T,POL_TERM_Y):
	arr_REN_T=np.zeros(T.shape,dtype=int32)
	for y in prange(T.shape[0]):
		for t in range(T.shape[1]):
			arr_REN_T[y,t]=REN_T(RENEWABLE_IND[y,0],T[y,t],POL_TERM_Y[y,0])
	return arr_REN_T
