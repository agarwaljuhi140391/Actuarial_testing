
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def REN_POL_YR(RENEWABLE_IND,POL_YR,POL_TERM_Y):
	if RENEWABLE_IND==0:
		return POL_YR
	else:
		return POL_YR-POL_TERM_Y*max(0,(POL_YR-1)//POL_TERM_Y)		


@njit(nogil=True, parallel=True, cache=True)
def wrapped_REN_POL_YR(RENEWABLE_IND,POL_YR,POL_TERM_Y):
	arr_REN_POL_YR=np.zeros(POL_YR.shape,dtype=float64)
	for y in prange(POL_YR.shape[0]):
		for t in range(POL_YR.shape[1]):
			arr_REN_POL_YR[y,t]=REN_POL_YR(RENEWABLE_IND[y,0],POL_YR[y,t],POL_TERM_Y[y,0])
	return arr_REN_POL_YR
