
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def PREM_INC_PP(ANN_PREM_PP,PREM_FRAC_PP):
	return ANN_PREM_PP*PREM_FRAC_PP


@njit(nogil=True, parallel=True, cache=True)
def wrapped_PREM_INC_PP(ANN_PREM_PP,PREM_FRAC_PP):
	arr_PREM_INC_PP=np.zeros(ANN_PREM_PP.shape,dtype=float64)
	for y in prange(ANN_PREM_PP.shape[0]):
		for t in range(ANN_PREM_PP.shape[1]):
			arr_PREM_INC_PP[y,t]=PREM_INC_PP(ANN_PREM_PP[y,t],PREM_FRAC_PP[y,t])
	return arr_PREM_INC_PP
