
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def INITIAL_COMM_BEFORE_TAX(IC_BASE_PAYBL_PP,COMM_CAP,IC_ADD_PAYBL_PP,COMM_PAY_ADJ):
	return (min(IC_BASE_PAYBL_PP,COMM_CAP)+IC_ADD_PAYBL_PP) * COMM_PAY_ADJ


@njit(nogil=True, parallel=True, cache=True)
def wrapped_INITIAL_COMM_BEFORE_TAX(IC_BASE_PAYBL_PP,COMM_CAP,IC_ADD_PAYBL_PP,COMM_PAY_ADJ):
	arr_INITIAL_COMM_BEFORE_TAX=np.zeros(IC_BASE_PAYBL_PP.shape,dtype=float64)
	for y in prange(IC_BASE_PAYBL_PP.shape[0]):
		for t in range(IC_BASE_PAYBL_PP.shape[1]):
			arr_INITIAL_COMM_BEFORE_TAX[y,t]=INITIAL_COMM_BEFORE_TAX(IC_BASE_PAYBL_PP[y,t],COMM_CAP[y,t],IC_ADD_PAYBL_PP[y,t],COMM_PAY_ADJ[y,t])
	return arr_INITIAL_COMM_BEFORE_TAX
