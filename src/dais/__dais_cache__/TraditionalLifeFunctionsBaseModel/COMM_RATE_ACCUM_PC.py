
#THIS CODE IS AUTO-GENERATED by complex_template, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64
from dais.models.simple_dispatcher import irr_est

@njit(nogil=True, cache=True)
def COMM_RATE_ACCUM_PC(POL_MTH,COMM_ACCUM_FAC,COMM_RATE_PC,COMM_RATE_ACCUM_PC):
	for t in range(POL_MTH.shape[0],-1,-1): #This goes backwards
		if (t+1)>POL_MTH.shape[0]:
			COMM_RATE_ACCUM_PC[t]=0
		else:
			if POL_MTH[t]==1:
				COMM_RATE_ACCUM_PC[t] = (COMM_RATE_PC[t]*COMM_ACCUM_FAC[0]) + COMM_RATE_ACCUM_PC[t+1]
			else:
				COMM_RATE_ACCUM_PC[t] = COMM_RATE_ACCUM_PC[t+1]


@njit(nogil=True, parallel=True, cache=True)
def wrapped_COMM_RATE_ACCUM_PC(POL_MTH,COMM_ACCUM_FAC,COMM_RATE_PC):
	arr_COMM_RATE_ACCUM_PC=np.zeros((POL_MTH.shape[0],POL_MTH.shape[1]),dtype=float64)
	for y in prange(arr_COMM_RATE_ACCUM_PC.shape[0]):
		COMM_RATE_ACCUM_PC(POL_MTH[y,:],COMM_ACCUM_FAC[y,:],COMM_RATE_PC[y,:],arr_COMM_RATE_ACCUM_PC[y,:])
	return arr_COMM_RATE_ACCUM_PC
