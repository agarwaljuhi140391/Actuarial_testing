
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def SUM_ASSURED2(T,REN_POL_TERM_Y,ANN_TERM_Y,SUM_ASSURED):
	#THERE'S SOMETHING COMPLICATED GOINNG ON IN THE SPREADSHEET THAT DIVES IN TO COMMUTATION. I'M GOING TO PAUSE THIS TRAIN FOR NOW
	if T>(REN_POL_TERM_Y+ANN_TERM_Y)*12:
		return 0
	else:
		return SUM_ASSURED


@njit(nogil=True, parallel=True, cache=True)
def wrapped_SUM_ASSURED2(T,REN_POL_TERM_Y,ANN_TERM_Y,SUM_ASSURED):
	arr_SUM_ASSURED2=np.zeros(T.shape,dtype=float64)
	for y in prange(T.shape[0]):
		for t in range(T.shape[1]):
			arr_SUM_ASSURED2[y,t]=SUM_ASSURED2(T[y,t],REN_POL_TERM_Y[y,0],ANN_TERM_Y[y,0],SUM_ASSURED[y,0])
	return arr_SUM_ASSURED2
