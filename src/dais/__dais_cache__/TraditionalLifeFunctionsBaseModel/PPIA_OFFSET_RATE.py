
#THIS CODE IS AUTO-GENERATED by timeloop_tempate, DO NOT DIRECTLY EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!

from numba import njit, void, prange
import numpy as np
import math
from numpy import float64, int32, int64

@njit(nogil=True, cache=True)
def PPIA_OFFSET_RATE(T,PPIA_IND,PPIA_TERM_M,POL_YR,REN_POL_TERM_Y,SUM_ASSURED2,PREM_INC_PP):
	#This complains about a runtime warning, but I can't figure out where it comes from
	if (PPIA_IND==0) or (T>PPIA_TERM_M) or (T<=1) or (POL_YR>REN_POL_TERM_Y):
		return 0
	else:
		if SUM_ASSURED2==0:
			return 0
		else:
			return -PREM_INC_PP/SUM_ASSURED2


@njit(nogil=True, parallel=True, cache=True)
def wrapped_PPIA_OFFSET_RATE(T,PPIA_IND,PPIA_TERM_M,POL_YR,REN_POL_TERM_Y,SUM_ASSURED2,PREM_INC_PP):
	arr_PPIA_OFFSET_RATE=np.zeros(T.shape,dtype=float64)
	for y in prange(T.shape[0]):
		for t in range(T.shape[1]):
			arr_PPIA_OFFSET_RATE[y,t]=PPIA_OFFSET_RATE(T[y,t],PPIA_IND[y,0],PPIA_TERM_M[y,0],POL_YR[y,t],REN_POL_TERM_Y[y,0],SUM_ASSURED2[y,t],PREM_INC_PP[y,t])
	return arr_PPIA_OFFSET_RATE
